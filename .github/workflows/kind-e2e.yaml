name: KinD e2e tests

on:
  push:
    branches: [ 'kind-e2e' ]
  # push:
  #   branches: [ 'master', 'release-*' ]
  # pull_request:
  #   branches: [ 'master', 'release-*' ]

jobs:

  ko-resolve:
    name: e2e tests
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
      KO_DOCKER_REPO: kind.local

    steps:
    - name: Set up Go 1.14.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14.x

    - name: Install Dependencies
      run: |
        GO111MODULE=on go get github.com/google/ko/cmd/ko@master

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        path: ./src/knative.dev/net-contour

    - name: Install KinD
      working-directory: ./src/knative.dev/net-contour
      env:
        KIND_VERSION: v0.8.1
      run: |
        set -x

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      working-directory: ./src/knative.dev/net-contour
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster
        nodes:
        - role: control-plane
        - role: worker
        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Upload Test Images
      working-directory: ./src/knative.dev/net-contour
      run: |
        # Build and Publish our test images to the docker daemon.
        ./test/upload-test-images.sh

    - name: Install Knative net-contour
      working-directory: ./src/knative.dev/net-contour
      run: |
        # Build and Publish our containers to the docker daemon (including test assets)
        export GO111MODULE=on
        export GOFLAGS=-mod=vendor
        ko resolve -Pf test/config/ -f config/contour -f config | \
          sed 's/LoadBalancer/NodePort/g' | \
          sed 's/imagePullPolicy:/# DISABLED: imagePullPolicy:/g' | \
          kubectl apply -f -

    - name: Wait for Ready
      working-directory: ./src/knative.dev/net-contour
      run: |
        # Wait for some pods to be created
        sleep 3

        echo Waiting for Pods to become ready.
        kubectl wait pod --for=condition=Ready -n contour-external -lapp=contour
        kubectl wait pod --for=condition=Ready -n contour-external -lapp=envoy
        kubectl wait pod --for=condition=Ready -n contour-internal -lapp=contour
        kubectl wait pod --for=condition=Ready -n contour-internal -lapp=envoy
        kubectl wait pod --all --for=condition=Ready -n knative-serving

        # For debugging.
        kubectl get pods --all-namespaces

    - name: Run e2e Tests
      working-directory: ./src/knative.dev/net-contour
      run: |
        set -x

        kubectl get nodes -oyaml

        HTTP=$(kubectl get svc -ncontour-external envoy -ojsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
        IPS=( $(kubectl get nodes -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )
        ENDPOINT="${IPS[0]}:${HTTP}"

        # Run the tests tagged as e2e on the KinD cluster.
        go test -v -race -count=1 -short -timeout=20m -tags=e2e ./test/conformance/... \
           --ingressendpoint="${ENDPOINT}" \
           --ingressClass=contour.ingress.networking.knative.dev
